# -*- coding: utf-8 -*-
"""BigMart sales prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/131xG5sVkE0vT12cC5PiSETdo5G-Y7YB0
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.preprocessing import LabelEncoder
from xgboost import XGBRegressor
from sklearn.linear_model import LinearRegression


from sklearn.model_selection import GridSearchCV

bigmart_data = pd.read_csv('/content/drive/MyDrive/ML datasets/BigMart Sales Predictiom/Train.csv')
bigmart_data.head()

bigmart_data.info()

"""# Categorical features:  
-Item_Identifier            
-Item_Fat_Content           
-Item_Type     
-Outlet_Identifier  
-Outlet_Size     
-Outlet_Location_Type       
-Outlet_Type                                                 
"""

# Checking missing values
bigmart_data.isnull().sum()

"""# Handling missing values
--> Mean: average value  
--> Mode: most repeated value

**Item_weight column:** In case of this column, we are going to use the mean value to replace the missing values. This method is called imputation.

**Outlet_Size** : As this column represents categorical features, we are going to use the mode instead of mean.              
"""

# Handling missing values

#mean value of Item_weight column:
bigmart_data['Item_Weight'].mean()

#filling the missing values in Item_weight column
bigmart_data['Item_Weight'].fillna(bigmart_data['Item_Weight'].mean(), inplace = True)

bigmart_data.isnull().sum()

bigmart_data['Outlet_Size'].mode()

#now for the categorical feature

mode_of_Outlet_size = bigmart_data.pivot_table(values='Outlet_Size', columns='Outlet_Type', aggfunc=(lambda x: x.mode()[0]))
print(mode_of_Outlet_size)
# Explanation:
# we chose outlet size and outlet type because these are correlated. Still no idea on the other things of the code

missing_values = bigmart_data['Outlet_Size'].isnull()
print(missing_values)

# Now that we have the mode, we can fill up the missing values. Here True means missing value. so we gonna fillup those using mode

# replacing missing values
bigmart_data.loc[missing_values, 'Outlet_Size'] = bigmart_data.loc[missing_values,'Outlet_Type'].apply(lambda x: mode_of_Outlet_size[x])

bigmart_data['Outlet_Size'].isnull()

bigmart_data.isnull().sum()

"""## Data Analysis"""

sns.set()

plt.figure(figsize=(6,6))
sns.distplot(bigmart_data['Item_Weight'])
plt.show()

plt.figure(figsize=(6,6))
sns.distplot(bigmart_data['Item_MRP'])
plt.show()

plt.figure(figsize=(6,6))
sns.distplot(bigmart_data['Item_Outlet_Sales'])
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x = 'Outlet_Establishment_Year', data = bigmart_data)
plt.show()

plt.figure(figsize=(30,6))
sns.countplot(x = 'Item_Type', data = bigmart_data)
plt.show()

bigmart_data['Item_Fat_Content'].value_counts()

# At first clean the data
bigmart_data.replace({'Item_Fat_Content':{'LF':'Low Fat', 'low fat':'Low Fat', 'reg':'Regular'}}, inplace = True)
bigmart_data['Item_Fat_Content'].value_counts()

bigmart_data['Outlet_Size'].value_counts()

"""# Label Encoding:
Converting the categorical or text data to numerical values.
Okayyy something interesting. Up until now, we manually changed the test values to numerical values right? NOT ANYMORE. there might be many values to change and for that we have encoder function, Label Encoder(The saviour). lets see how it works.

"""

encoder = LabelEncoder()

bigmart_data['Item_Fat_Content'] = encoder.fit_transform(bigmart_data['Item_Fat_Content'])
bigmart_data['Item_Identifier'] = encoder.fit_transform(bigmart_data['Item_Identifier'])
bigmart_data['Item_Type'] = encoder.fit_transform(bigmart_data['Item_Type'])
bigmart_data['Outlet_Identifier'] = encoder.fit_transform(bigmart_data['Outlet_Identifier'])
bigmart_data['Outlet_Size'] = encoder.fit_transform(bigmart_data['Outlet_Size'])
bigmart_data['Outlet_Location_Type'] = encoder.fit_transform(bigmart_data['Outlet_Location_Type'])
bigmart_data['Outlet_Type'] = encoder.fit_transform(bigmart_data['Outlet_Type'])

bigmart_data.head()

# Splitting features and target
x = bigmart_data.drop('Item_Outlet_Sales', axis = 1)
y = bigmart_data['Item_Outlet_Sales']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2,  random_state=3)

print(x.shape, x_train.shape, x_test.shape)

regressor = LinearRegression()

regressor.fit(x_train, y_train)
training_prediction = regressor.predict(x_train)
accuracy = metrics.r2_score(y_train,training_prediction )
print(accuracy)

test_prediction = regressor.predict(x_test)
accuracy = metrics.r2_score(y_test,test_prediction )
print(accuracy)

plt.scatter(y_test, test_prediction)
plt.xlabel('actual value')
plt.ylabel('predicted value')
plt.title('actual vs predicted')
plt.show